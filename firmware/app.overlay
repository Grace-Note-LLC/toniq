/* app.overlay */

/* Enable and configure SPI1 peripheral */
&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	pinctrl-0 = <&spi1_default_pins>;
	pinctrl-1 = <&spi1_sleep_pins>;
	pinctrl-names = "default", "sleep";

	/* MIPI DBI node using SPI1 */
	// vscode will complain with a linter error here. I believe we 
	// can ignore it since no code is actually written here. 
	// This file only sets up the device tree; if the device tree
	// is "working" (according to the nRF connect tool) then who 
	// gaf about the linter error.
	mipi_dbi_spi1: mipi_dbi@0 { 
		compatible = "zephyr,mipi-dbi-spi";
		spi-dev = <&spi1>;
		#address-cells = <1>;
		#size-cells = <0>;
		status = "okay"; 
		reg = <0>;

		/* GPIOs controlled by the MIPI DBI layer */
		dc-gpios = <&gpio0 17 GPIO_ACTIVE_HIGH>; /* P0.17 (HIGH = Data) */
		reset-gpios = <&gpio0 18 GPIO_ACTIVE_LOW>; /* P0.18 */

		/* Actual display node nested inside MIPI node */
		/* Use node label 'epaper_display' to reference in C code */
		epaper_display: ssd16xxfb@0 {
			compatible = "solomon,ssd1680";
			mipi-max-frequency = <4000000>;
			reg = <0>; /* SPI device address/CS index */

			width = <104>;
			height = <212>;

			rotation = <0>; 

			/* GPIOs handled directly by the SSD16XX driver */
			busy-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>; /* P0.20 (LOW = Busy) */
		};
	};
};

/* Pin control definition remains the same */
&pinctrl {
	spi1_default_pins: spi1_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 15)>,
					<NRF_PSEL(SPIM_MOSI, 0, 13)>;
		};
	};
	spi1_sleep_pins: spi1_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 15)>,
					<NRF_PSEL(SPIM_MOSI, 0, 13)>;
			low-power-enable;
		};
	};
};
